import { getAsObject, get } from "@parameter1/base-cms-object-path";
import queryFragment from "../../graphql/fragments/content-hero-card";

$ const { sectionId } = input;

$ const queryParams = {
  optionName: "Pinned",
  limit: 1,
  requiresImage: true,
  queryFragment,
  sectionBubbling: false,
  excludeContentTypes: ["Contact", "Promotion", "TextAd", "Event"],
  ...getAsObject(input, "queryParams"),
  sectionId,
};

<marko-web-query|{ nodes }| name="website-optioned-content" params=queryParams>
  $ const content = nodes[0];
  $ const primaryImage = getAsObject(content, "primaryImage");
  <marko-web-node
    type=`${content.type}-content`
    image-position="top"
    card=true
    flush=true
    full-height=false
    modifiers=["hero"]
  >
    <@header>
      <@left|{ blockName }|>
        <marko-web-content-short-name obj=content block-name=blockName link=true />
      </@left>
    </@header>
    <if(content.type === "video" && content.embedCode)>
      <@body>
        <@text>
          <marko-web-content-embed-code obj=content class="embed-responsive embed-responsive-16by9" />
        </@text>
        <@text modifiers=["teaser"] show=Boolean(content.teaser)>
          <marko-web-content-teaser tag=null obj=content link=false />
        </@text>
      </@body>
    </if>
    <else>
      <@image
        ar="16:9"
        width="630"
        fluid=true
        use-placeholder=false
        src=primaryImage.src
        alt=primaryImage.alt
        is-logo=primaryImage.isLogo
        link={ href: get(content, "siteContext.path") }
      >
        <@body>
          <@text modifiers=["teaser"] show=Boolean(content.teaser)>
            <marko-web-content-teaser tag=null obj=content link=true />
          </@text>
        </@body>
      </@image>
    </else>
  </marko-web-node>
</marko-web-query>
