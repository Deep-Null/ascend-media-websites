import { getAsObject, get } from "@parameter1/base-cms-object-path";
import defaultValue from "@parameter1/base-cms-marko-core/utils/default-value";
import queryFragment from "../../graphql/fragments/section-list-content";
import sectionFragment from "../../graphql/fragments/section-list-section";

$ const { nativeX: nxConfig } = out.global;

$ const { sectionAlias } = input;
$ const nativeX = getAsObject(input, "nativeX");
$ const linkHeader = defaultValue(input.linkHeader, true);
$ const imagePosition = defaultValue(input.imagePosition, "left");
$ const withTeaser = defaultValue(input.withTeaser, false);
$ const innerJustified = defaultValue(input.innerJustified, true);
$ const withSection = defaultValue(input.withSection, true);
$ const imageWidth = defaultValue(input.imageWidth, "90");

$ const queryParams = {
  limit: input.limit || 4,
  queryFragment,
  sectionFragment,
  requiresImage: true,
  sectionBubbling: false,
  ...getAsObject(input, "queryParams"),
  sectionAlias,
};

<marko-web-query|{ nodes, section }| name="website-scheduled-content" params=queryParams>
  <!-- Native-X here uses base 0 indexing whereas Array.length is defined using base 1 -->
  $ const slotInNativeX = nxConfig.enabled && (nativeX && nativeX.index >= 0);
  $ const finalizedNodes =  slotInNativeX ? [
    ...nodes.slice(0, nativeX.index),
    {},
    ...nodes.slice(nativeX.index, nodes.length)
  ] : nodes;
  <marko-web-node-list
    inner-justified=innerJustified
    flush-x=false
    flush-y=false
    ...input.list
    class=input.class
  >
    <@header>
      <if(input.header)>
        <${input.header} section=section />
      </if>
      <else>
        <marko-web-website-section-name obj=section link=linkHeader />
      </else>
    </@header>
    <@nodes nodes=finalizedNodes>
      <@slot|{ node, index }|>
        <marko-web-native-x-render|{ node: nxNode, linkAttrs, containerAttrs }|
          ...nativeX
          when=(index === nativeX.index)
          node=node
          config=nxConfig
        >
          $ const primaryImage = getAsObject(nxNode, "primaryImage");
          $ const primarySection = getAsObject(nxNode, "primarySection");
          <marko-web-node
            image-position=imagePosition
            flush=true
            full-height=false
            attrs=containerAttrs
          >
            <@image
              ar="1:1"
              width=imageWidth
              use-placeholder=false
              src=primaryImage.src
              alt=primaryImage.alt
              is-logo=primaryImage.isLogo
              link={ href: get(nxNode, "siteContext.path"), attrs: linkAttrs }
              ...input.image
            />
            <@body>
              <if(withSection)>
                <@header>
                  <@left>
                    <marko-web-website-section-name obj=primarySection link=true />
                  </@left>
                </@header>
                </if>
              <@title tag="h5">
                <marko-web-content-short-name tag=null obj=nxNode link={ attrs: linkAttrs } />
              </@title>
              <@text modifiers=["teaser"] show=withTeaser>
                <marko-web-content-teaser tag=null obj=nxNode link={ attrs: linkAttrs } />
              </@text>
            </@body>
          </marko-web-node>
        </marko-web-native-x-render>
      </@slot>
    </@nodes>
  </marko-web-node-list>
</marko-web-query>
