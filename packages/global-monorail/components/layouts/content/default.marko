import { getAsArray, get, getAsObject } from "@parameter1/base-cms-object-path";

import convertAdToContent from "@parameter1/base-cms-marko-web-native-x/utils/convert-ad-to-content";
import getContentPreview from "@parameter1/base-cms-marko-web-theme-monorail/utils/get-content-preview";
import contentInjectAds from "@ascend-media/package-global-monorail/utils/content-native-ad-inject";
import contentIframe from "@ascend-media/package-global-monorail/utils/content-iframe";


$ const { site, contentMeterState, parseEmbeddedMedia, req, res, nativeX: nxConfig } = out.global;
$ const { id, type, pageNode, showReadNextBlock, showBottomAdBlock, showTopStoryBlock, ...rest } = input;
$ const sections = getAsArray(input, "sections");

$ const displayPrimaryImage = ["media-gallery"].includes(type) ? false : true;
$ const displayPublishedDate = ["company", "contact", "whitepaper"].includes(type) ? false : true;
$ const displayReadNext = showReadNextBlock && ["article"].includes(type);
$ const displaySocialShare = ["contact"].includes(type) ? false : true;
$ const newsletterConfig = site.getAsObject('newsletter.signupBannerLarge');
$ const shouldInjectAds = ["article", "video", "news", "podcast"].includes(type);

<global-content-wrapper-layout
  id=id
  type=type
  page-node=pageNode
  ...rest
>
  <@section|{ blockName, content, aliases, authors }| modifiers=["content-header"]>
    $ const { primarySection } = content;
    <div class="content-page-header">
      <theme-content-page-breadcrumbs section=primarySection />
      <marko-web-content-name tag="h1" block-name=blockName obj=content />
      <if(type !== "contact")>
        <if(authors.length === 1)>
          <theme-author-published-node author=authors[0] content=content lazyload=false />
        </if>
        <else-if(authors.length > 1)>
          <default-theme-content-attribution obj=content elements=["authors"] />
        </else-if>
      </if>
      <if(displayPublishedDate && authors.length !== 1)>
        <default-theme-page-dates|{ blockName }|>
          <theme-content-published-node block-name=blockName obj=content display-updated-date=false />
        </default-theme-page-dates>
      </if>
      <global-sponsored-section-logo alias=primarySection.alias modifiers=["content-page"] class="mt-3" />
    </div>
  </@section>

  <@section|{ aliases, content, authors }| modifiers=["content-body"]>
    $ const { primarySection } = content;
    <div class="row">
      <div class="col-lg-8">
        <div class="content-page-body">
          <default-theme-page-contents|{ blockName }| attrs={ "data-gallery-id": id }>
            <if(content.embedCode)>
              $ const iframeContent = contentIframe(content);
              <marko-web-content-embed-code block-name=blockName obj=iframeContent />
            </if>
            <else-if(type === "media-gallery")>
              <!-- <marko-web-image-slider images=images /> -->
            </else-if>
            <else-if(displayPrimaryImage)>
              $ let forceDisplay;
              $ if (type === "contact") forceDisplay = "left";
              $ if (type === "video") forceDisplay = "none";
              <theme-primary-image-block
                obj=content.primaryImage
                force-display=forceDisplay
              />
            </else-if>
            $ const requiresRegistration = get(content, "userRegistration.isCurrentlyRequired");
            $ const accessLevels = getAsArray(content, "userRegistration.accessLevels");
            <marko-web-identity-x-access|context|
              enabled=requiresRegistration
              required-access-level-ids=accessLevels
            >
              <if(!context.canAccess)>
                $ const body = getContentPreview({ body: content.body, selector: "p:nth-of-type(1)" });
                <marko-web-content-body block-name=blockName obj={ body } />

                <div class="content-page-preview-overlay" />
                <theme-content-page-gate
                  can-access=context.canAccess
                  is-logged-in=context.isLoggedIn
                  has-required-access-level=context.hasRequiredAccessLevel
                  requires-access-level=context.requiresAccessLevel
                  requires-user-input=context.requiresUserInput
                  messages=context.messages
                />
              </if>
              <else>

                $ const bodyId = `content-body-${content.id}`;

                <if(shouldInjectAds)>
                  $ const nativeXUri = nxConfig.getUri();
                  $ const { id: nativeXPlacementId } = nxConfig.getPlacement({ name: "default", aliases });
                  <await(contentInjectAds({
                    content,
                    parseEmbeddedMedia,
                    req,
                    res,
                    nativeXUri,
                    nativeXPlacementId,
                  }))>
                    <@then|result|>
                      <marko-web-obj-text
                        type="content"
                        block-name=input.blockName
                        obj=result
                        field="body"
                        html=true
                        tag=input.tag
                        class=input.class
                        modifiers=input.modifiers
                        attrs={ id: bodyId }
                        link=input.link
                      />
                    </@then>
                  </await>
                </if>

                <else>
                  <marko-web-content-body block-name=blockName obj=content attrs={ id: bodyId } />
                </else>

                <!-- needs input -->
                <if(input.afterBody)>
                  <${input.afterBody}
                    aliases=aliases
                    block-name=blockName
                    content=content
                  />
                </if>

                $ const sidebars = getAsArray(content, "sidebars").map((sidebar) => sidebar.body);
                <marko-web-content-sidebars block-name=blockName obj={ sidebars } />
                <if(type === "document" || type === "whitepaper")>
                    <default-theme-content-download obj=content>
                      <@wufoo user-name=site.get("wufoo.userName") />
                      <@link class="btn btn-primary" />
                    </default-theme-content-download>
                </if>
                <if(type !== "contact")>
                  <for|author| of=authors>
                    <if(getAsArray(author, "labels").includes("Contributor"))>
                      <marko-web-content-body obj=author block-name="inline-author-bio" />
                    </if>
                  </for>
                </if>

                <if(displayReadNext)>
                  <theme-read-next-block
                    content-id=id
                    section-id=primarySection.id
                    published=content.published
                  />
                </if>

                <if(!newsletterConfig.disabled)>
                  <identity-x-newsletter-form-inline type="inlineContent" />
                </if>
                <else>
                  <theme-newsletter-signup-banner-external-block config-name="signupBannerStatic" />
                </else>

                <if(displaySocialShare)>
                  <marko-web-social-sharing
                    path=content.siteContext.path
                    providers=["print", "facebook", "linkedin", "twitter", "pinterest"]
                    print-path=`/print/content/${content.id}`
                  />
                </if>
                <!-- <if(displayNewsletterSignup)>
                  <marko-web-identity-x-context|{ hasUser }|>
                    <if(!hasUser)>
                      <identity-x-newsletter-form-inline
                        button-labels=buttonLabels
                        login-email-label=loginEmailLabel
                        login-email-placeholder="example@yourcompany.com"
                        type="inlineContent"
                        action-text=actionText
                      />
                    </if>
                  </marko-web-identity-x-context>
                </if> -->
              </else>

            </marko-web-identity-x-access>
          </default-theme-page-contents>
        </div>
      </div>
      <div class="col-lg-4 page-rail">
        $ const excludeContentTypes = ["Contact", "Company", "Document", "TextAd", "Promotion"];
        <theme-latest-content-list-block
          title=`Latest in ${primarySection.name}`
          alias=primarySection.alias
          query-params={ excludeContentTypes, excludeContentIds: [content.id] }
          class="sticky-top"
        >
          <@native-x indexes=[0] name="default" aliases=aliases />
        </theme-latest-content-list-block>
      </div>
    </div>
  </@section>

  <@section|{ content }|>
    <theme-related-stories-block
      content-id=content.id
      section-id=content.primarySection.id
      published=content.published
      with-native-x=true
    />
  </@section>

  <for|s| of=sections>
    <@section|{ blockName, content, aliases }| modifiers=s.modifiers>
      <${s.renderBody}
        block-name=blockName
        content=content
        aliases=aliases
      />
    </@section>
  </for>
</global-content-wrapper-layout>
