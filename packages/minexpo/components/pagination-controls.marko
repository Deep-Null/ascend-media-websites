import { cleanPath } from "@parameter1/base-cms-utils";
import defaultValue from "@parameter1/base-cms-marko-core/utils/default-value";
import { get } from "@parameter1/base-cms-object-path";

$ const { $markoWebSearch: search, req } = out.global;
$ const totalCount = defaultValue(input.totalCount, 0);
$ const linkClasses = get(input.link, "class");
$ const { path } = input;
$ const reqQueryParams = defaultValue(req.query, {});
$ delete reqQueryParams.page;
$ const reqQueryParamsStr = Object.keys(reqQueryParams).map((key) => `${key}=${reqQueryParams[key]}`).join('&');

$ const blockName = "marko-web-search-pagination-controls";

<if(totalCount)>
  <marko-web-block ...input.block name=blockName>
    <marko-web-search-previous-page-link
      ...input.link
      class=`${linkClasses} ${blockName}__prev`
    />

    <marko-web-element block-name=blockName name="pages">
      $ const currentPage = search.getCurrentPage();
      $ const totalPages = search.getTotalPages(totalCount);
      <if(input.renderBody)>
        <!-- custom rendering -->
        <${input.renderBody} current-page=currentPage total-pages=totalPages />
      </if>
      <else>
        <!-- default rendering -->
        <marko-web-element block-name=blockName name="pages">
          <marko-web-browser-component name="PaginationPageNumberInput" props={ page: currentPage, totalPages, path: cleanPath(path), queryStr: reqQueryParamsStr } />
        </marko-web-element>
      </else>

    </marko-web-element>

    <marko-web-search-next-page-link
      ...input.link
      class=`${linkClasses} ${blockName}__next`
      total-count=totalCount
    />
  </marko-web-block>
</if>
