import { getAsArray, getAsObject } from "@parameter1/base-cms-object-path";
import hierarchyAliases from "@parameter1/base-cms-marko-web/utils/hierarchy-aliases";
import hierarchyIds from "@parameter1/base-cms-marko-web/utils/hierarchy-ids";
import defaultValue from "@parameter1/base-cms-marko-core/utils/default-value";
import queryFragment from "../../graphql/fragments/content-list";
import { retrieveSections } from "../../utils/retrieve-sections";
import categorySectionsFragment from "../../graphql/fragments/category-sections"
import { buildContentQuery } from "../../components/search/queries";

$ const { $algolia, apollo, GAM, pagination: p, req } = out.global;
$ const contentType = defaultValue(req.query.type, 'Company');
$ const selectedCountry = defaultValue(req.query.country, '');
$ const phrase = defaultValue(req.query.phrase, '');
$ const supportedContendTypes = {
  Company: 'Exhibitor',
  Product: 'Product',
  News: 'News'
};

$ const {
  id,
  alias,
  name,
  pageNode,
} = input;
$ const perPage = 20;

<marko-web-resolve-page|{ data: section }| node=pageNode>
  $ let queryParams = {
    sectionId: section.id,
    optionName: ["Standard"],
    queryFragment,
    includeContentTypes: [contentType]
  };
  $ if ('Company' === contentType) queryParams.sort = { field: 'name', order: 'asc' };
  <marko-web-website-section-page-layout id=id alias=alias name=name>
    <@head>
      <marko-web-gtm-website-section-context|{ context }| alias=alias>
        <marko-web-gtm-push data=context />
      </marko-web-gtm-website-section-context>
      $ const aliases = hierarchyAliases(section);
      $ const adSlots = {
        "gpt-ad-lb1": GAM.getAdUnit({ name: "lb1", aliases }),
        "gpt-ad-rail1": GAM.getAdUnit({ name: "rail1", aliases }),
      };
      <marko-web-gam-slots slots=adSlots />
      <marko-web-gam-targeting
        key-values={
          currentCategoryId: id,
          superCategoryIds: hierarchyIds(section).filter(sectionId => sectionId !== id)
        }
      />
    </@head>
    <@above-container>
      <marko-web-gam-display-ad id="gpt-ad-lb1" modifiers=["above-container"] />
    </@above-container>
    <@page>
      <marko-web-page-wrapper class="mb-block">
        <@section>
          <div class="row">
            <div class="col">
              <default-theme-website-section-breadcrumbs section=section display-home=false />
              <marko-web-website-section-name tag="h1" class="page-wrapper__title" obj=section />
              <marko-web-website-section-description tag="p" class="page-wrapper__deck" obj=section />
            </div>
          </div>
        </@section>
        <@section>
          <form method="GET" action=req.path class="search-form row">
            <div class="col form-group search-form__group search-form__group--phrase">
              <label for="search-phrase" class="sr-only">Enter search phrase</label>
              <input id="search-phrase" name="phrase" type="search" class="form-control" value=phrase placeholder="Enter search phrase...">
              <if(contentType !== 'Company')>
                <label for="content-type" class="sr-only">Content Type</label>
                <input id="content-type" name="type" type="hidden" class="form-control" value=contentType placeholder="">
              </if>
            </div>
            <button type="submit" class="col btn btn-primary search-form__btn search-form__btn--search">Search</button>
          </form>
        </@section>

        <@section>
          $ const aliases = hierarchyAliases(section);
          <marko-web-query|{ node: sectionWithChildren }|
            name="website-section"
            params={ alias: section.alias, queryFragment: categorySectionsFragment }
          >

            $ const getChildIds = (section, ids) => {
              ids.push(...getAsArray(sectionWithChildren, "children.edges").map(({ node }) => node.id));
              const children = getAsArray(sectionWithChildren, "children.edges").map(({ node }) => node);

              children.forEach((child) => {
                ids.push(...getAsArray(child, "children.edges").map(({ node }) => node.id));
              })
              return ids;
            };

            $ const sectionIds = getChildIds(section, [section.id]);
            <div class="row">
              <div class="col-lg-4">
                <div class="mb-block">
                  <marko-web-gam-display-ad id="gpt-ad-rail1" />
                </div>
                <div class="directory-filters mb-block">
                  <h3 class="directory-filters__title mb-block">
                    Filters:
                  </h3>
                  <div class="row">
                    <div class="col">
                      <div class="mb-block">
                        <shared-directory-categories-block
                          title="Product Categories"
                          aliases=aliases
                          active-id=id
                          content-type=contentType
                          phrase=phrase
                          with-toggle=true
                        />
                      </div>
                      <div class="mb-block">
                        <div class="content-type-facets">
                          <h3 class="content-type-facets__title">
                            Type
                            <default-theme-menu-toggle-button
                              class-name=`content-type-facets__toggle`
                              targets=[`.content-type-facets__list`]
                              toggle-class='content-type-facets__list--open'
                              initially-expanded=false
                              icon-modifiers=["sm"]
                              icon-name="plus"
                              expanded-icon-name="dash"
                            />
                          </h3>
                          $ let contentFilterAlias = (phrase) ? `/${section.alias}?phrase=${phrase}` : `/${section.alias}`;
                          <div class='content-type-facets__list'>
                            <for|key,value| in=supportedContendTypes>
                              <if(key === 'Company')>
                              $ const activeModifier = ('Company' === contentType) ? '--active' : '';
                              <div class=`content-type-facets__item content-type-facets__item--${key}`>
                                <a class=`content-type-facets__link content-type-facets__link${activeModifier}` href=contentFilterAlias>
                                  ${value}
                                </a>
                              </div>
                              </if>
                              <else-if(key === contentType)>
                                <div class=`content-type-facets__item content-type-facets__item--${key}`>
                                  <a class=`content-type-facets__link content-type-facets__link--active` href=contentFilterAlias>
                                    ${value}
                                  </a>
                                </div>
                              </else-if>
                              <else>
                                $ contentFilterAlias = (phrase) ? `/${section.alias}?phrase=${phrase}&type=${key}` : `/${section.alias}?type=${key}`;
                                <div class=`content-type-facets__item content-type-facets__item--${key}`>
                                  <a class=`content-type-facets__link content-type-facets__link` href=contentFilterAlias>
                                    ${value}
                                  </a>
                                </div>
                              </else>
                            </for>
                          </div>
                        </div>
                      </div>
                      <if('Company' === contentType)>
                        <div class="mb-block">
                          <minexpo-country-facets|{ countries }|
                            phrase=phrase
                            section-ids=sectionIds
                          >
                            <div class="directory-country-facets">
                              <h3 class="directory-country-facets__title">
                                Country
                                <default-theme-menu-toggle-button
                                  class-name=`directory-country-facets__toggle`
                                  targets=[`.directory-country-facets__list`]
                                  toggle-class=`directory-country-facets__list--open`
                                  initially-expanded=false
                                  icon-modifiers=["sm"]
                                  icon-name="plus"
                                  expanded-icon-name="dash"
                                />
                              </h3>
                              <div class="directory-country-facets__list">
                                <for|country| of=countries>
                                  <if(selectedCountry === country)>
                                  <marko-web-browser-component
                                      name="DirectoryAutoScroll"
                                      props={
                                        containerTarget: '.directory-country-facets > .directory-country-facets__list',
                                        elementTarget: `.directory-country-facets__link--active`,
                                        offset: -12,
                                      }
                                    />
                                    $ const countryFilterLink = (phrase) ? `/${section.alias}?phrase=${phrase}` : `/${section.alias}`;
                                    <div class="directory-country-facets__item directory-country-facets__item--51709">
                                      <a
                                        class="directory-country-facets__link directory-country-facets__link--active"
                                        href=countryFilterLink
                                      >
                                        ${country}
                                      </a>
                                    </div>
                                  </if>
                                  <else>
                                    $ const countryFilterLink = (phrase) ? `/${section.alias}?phrase=${phrase}&country=${encodeURI(country)}` : `/${section.alias}?country=${encodeURI(country)}`;
                                    <div class="directory-country-facets__item directory-country-facets__item--51709">
                                      <a
                                        class="directory-country-facets__link"
                                        href=countryFilterLink
                                      >
                                        ${country}
                                      </a>
                                    </div>
                                  </else>
                                </for>
                              </div>
                            </div>
                          </minexpo-country-facets>
                        </div>
                      </if>
                    </div>
                  </div>

                </div>
                <div class="mb-block">
                  <common-leaders-directory-page expanded=false />
                </div>
              </div>
              <div class="col-lg-8 mb-block">
                <minexpo-content-search-query|{ nodes, totalCount, facets }|
                  phrase=phrase
                  limit=perPage
                  skip=p.skip({ perPage })
                  content-type=contentType
                  country=selectedCountry
                  section-ids=sectionIds
                  query-fragment=queryFragment
                >
                  <div class="row">
                    <div class="col">
                      <!-- $ console.log(facets.country); -->
                      <marko-web-node-list
                          inner-justified=true
                          flush-x=false
                          flush-y=false
                          modifiers=['content-list']
                        >
                        <@header>
                          <if('Company' === contentType)>
                            <if(p.page > 1)>${supportedContendTypes[contentType]} in ${section.name}: Page ${p.page}</if>
                            <else>${supportedContendTypes[contentType]}s Alphabetically</else>
                          </if>
                          <else>
                            <if(p.page > 1)>${section.name}: Page ${p.page}</if>
                            <else>Latest ${supportedContendTypes[contentType]} in ${section.name}</else>
                          </else>
                        </@header>
                        <@nodes nodes=nodes>
                          <@slot|{ node }|>
                            <minexpo-company-node
                              with-section=false
                              node=node
                              modifiers=["content-list"]
                            >
                              <@image width=250 ar="3:2" use-placeholder=true />
                            </minexpo-company-node>
                          </@slot>
                        </@nodes>
                      </marko-web-node-list>
                    </div>
                  </div>
                  <div class="row">
                    <div class="col">
                      <pagination-controls
                        per-page=perPage
                        total-count=totalCount
                        path=section.alias
                      />
                    </div>
                  </div>
                </minexpo-content-search-query>
              </div>
            </div>
          </marko-web-query>
        </@section>
      </marko-web-page-wrapper>
    </@page>
  </marko-web-website-section-page-layout>
</marko-web-resolve-page>
