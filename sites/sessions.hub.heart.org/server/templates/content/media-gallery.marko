import hierarchyAliases from "@parameter1/base-cms-marko-web/utils/hierarchy-aliases";
import { buildImgixUrl } from "@parameter1/base-cms-image";
import { getAsArray, getAsObject, get } from "@parameter1/base-cms-object-path";
import isActiveLink from "@parameter1/base-cms-marko-web-theme-default/components/site-navbar/utils/is-active-link";
import { asArray } from "@parameter1/base-cms-utils";

$ const { site, req, GAM } = out.global;
$ const { id, type, pageNode } = data;

$ const adSlots = ({ aliases }) => ({
  "gpt-ad-lb1": GAM.getAdUnit({ name: "lb1", aliases }),
  "gpt-ad-rail1": GAM.getAdUnit({ name: "rail1", aliases }),
  "gpt-ad-rail2": GAM.getAdUnit({ name: "rail2", aliases }),
});

$ const displayPrimaryImage = ["whitepaper", "media-gallery", "video", "event"].includes(type) ? false : true;
$ const displayPublishedDate = ["event", "webinar", "company", "contact"].includes(type) ? false : true;
$ const displayFeatured = ["company", "product", "contact"].includes(type) ? false : true;
$ const displayInquiry = (content) => {
  if (type === "company" && get(content, "enableRmi")) return true;
  if (get(content, "company.enableRmi")) return true;
  return false;
}
$ const displayCompanyImage = ["product", "press-release"].includes(type) ? true : false;
$ const displaySocialShare = ["contact"].includes(type) ? false : true;
$ const displayPhotoswipe = ["media-gallery"].includes(type) || req.query.displayPhotoswipe ? true : false;

$ const displayCompanyHeader = (content) => {
  const company = get(content, "company");
  if (get(content, "company")) return true;
  return false;
}

<marko-web-content-page-layout id=id type=type>
  <@head>
    <marko-web-gtm-content-context|{ context }| id=id>
      <marko-web-gtm-push data=context />
    </marko-web-gtm-content-context>
    <marko-web-gam-targeting key-values={ cont_id: id, cont_type: type } />
    <marko-web-resolve-page|{ data: content }| node=pageNode>
      $ const aliases = hierarchyAliases(content.primarySection);
      <marko-web-gam-slots slots=adSlots({ aliases }) />
    </marko-web-resolve-page>
  </@head>

  <@page>
    <marko-web-resolve-page|{ data: content, resolved }| node=pageNode>
    <marko-web-gam-display-ad id="gpt-ad-lb1" modifiers=["top-of-page", "max-width-790", "center"] />

      $ const aliases = hierarchyAliases(content.primarySection);
      <marko-web-page-wrapper>
        <@section>
          <div class="row">
            <default-theme-page-contents|{ blockName }|
              class="col-lg-12 mb-3 mb-lg-0"
              modifiers=[type]
              attrs={ "data-gallery-id": id }
            >
              <marko-web-element name="content-header" block-name=blockName>
                <default-theme-page-dates|{ blockName }|>
                  <marko-web-element tag="span" name="content-type" block-name=blockName>
                    ${content.typeTitled}
                  </marko-web-element>
                  <if(displayPublishedDate)>
                    <marko-web-content-published block-name=blockName obj=content />
                  </if>
                </default-theme-page-dates>

                <hr class="page-wrapper__above-title">
                <marko-web-content-name tag="h1" class="page-wrapper__title" obj=content />
                <marko-web-content-teaser tag="p" class="page-wrapper__deck" obj=content />
                <default-theme-content-attribution obj=content />
                <hr>
              </marko-web-element>

              <if(displaySocialShare)>
                <marko-web-social-sharing
                  path=content.siteContext.path
                  providers=["facebook", "twitter", "pinterest", "linkedin", "email"]
                />
              </if>

              $ const bodyId = `content-body-${id}`;
              <marko-web-content-body block-name=blockName obj=content attrs={ id: bodyId } />
              $ const images = getAsArray(content, 'images.edges').map((edge) => getAsObject(edge, "node"));
              <if(displayPhotoswipe && images)>
                <marko-web-photoswipe-images images=resolved.getEdgeNodesFor("images")>
                  <@props thumbnail-click-selectors=`[data-gallery-id="${id}"] [data-image-id]` />
                </marko-web-photoswipe-images>
              </if>
              <div class="page-images-gallery">
                <h6 class="page-images-gallery__title">
                  Thumbnails:
                </h6>
                <div class="page-images-gallery'__row row">
                  <for|image| of=images>
                    <div class="page-images-gallery__col col-4">
                      <img src=buildImgixUrl(image.src, input.imageOptions) alt=image.alt data-image-id=image.id />
                      <div class="page-images-gallery__overlay">
                        <span class="page-images-gallery__image-name">${image.displayName}</span>
                      </div>
                    </div>
                  </for>
                </div>
              </div>
            </default-theme-page-contents>
          </div>
        </@section>
      </marko-web-page-wrapper>
    </marko-web-resolve-page>
  </@page>
</marko-web-content-page-layout>
